/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
public:
    vector<int>v;
    int i=0;
    vector<int>convert(vector<NestedInteger>nestedList)
    {
        vector<int>t;
        for(auto x:nestedList)
        {
            if(x.isInteger())
                t.push_back(x.getInteger());
            else
            {
                vector<NestedInteger> z=x.getList();
                vector<int>v=convert(z);
                for(auto x:v)
                    t.push_back(x);
            }                    
        }
        return t;
    }
    NestedIterator(vector<NestedInteger> &nestedList) {

        v=convert(nestedList);
    }
    
    int next() {
        return v[i++];
    }
    
    bool hasNext() {
        if(i==v.size())
            return false;
        return true;
    }
};
/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
